# -*- coding: UTF-8 -*-
#!/usr/bin/python3

import os
import sys
import time

class AutoMake(object):
    def __init__(self, parser):
    #def __init__(self, custom, source, para):
        #self.custom = custom
        self.custom = parser.info
        self.c_source = "C_SOURCES = "
        self.as_source = "AS_SOURCES = "
        self.cpp_source = "CPP_SOURCES = "
        source = parser.target_source()
        self.para = parser.target_para()
        if len(source) < 1:
            print("The list of source file is None!")
        #print(source)
        for filename in source:
            #print(filename)
            if filename.endswith('.c'):
                self.c_source += " \\\n" + filename
            elif filename.endswith('.cpp'):
                self.cpp_source += " \\\n" + filename
            elif (filename.endswith('.s') or filename.endswith('.S')):
                self.as_source += " \\\n" + filename

    def autogen(self):
        #if self.custom.__contains__('BUILD_TYPE'):
        if self.custom.__contains__('BuildPath'):
            if not os.path.isdir(self.custom['BuildPath']):
                print("build path is not exsit, use cmd \'mkdir\'.")
                os.system('mkdir ' + self.custom['BuildPath'])
            path = os.path.join(self.custom['BuildPath'], self.para['TARGET'].replace('TARGET = ', ''))
            #print("autogen Makefile to:", path)
            filepath = os.path.join(path, "Makefile")
            self.para['MakefileDir'] = path
            if os.path.isdir(self.para['MakefileDir']):
                print("autogen Makefile to dir exsited:", self.para['MakefileDir'])
            else:
                create_dir = 'mkdir ' + self.para['MakefileDir']
                os.system(create_dir)
                print("mkdir:", self.para['MakefileDir'])
        else:
            print("autogen Makefile to:", os.getcwd())
            filepath = os.path.join(os.getcwd(), "Makefile")
        fd = open(filepath,"w+")
        time_stamp = time.strftime("%Y-%m-%d,%H:%M", time.gmtime())
        fd.write("############## This file autogenerated at " + time_stamp + " ##############\n")
        fd.write("\n\n")
        fd.write(self.para['TARGET'] + "\n\n")
        if self.custom.__contains__('BUILD_TYPE') and self.custom['BUILD_TYPE'] == "release":
            fd.write("DEBUG = 0\n\n")
        else:
            fd.write("DEBUG = 1\n\n")
        fd.write("ifeq (${DEBUG}, 1)\n")
        fd.write("BUILD_DIR = debug\nelse\nBUILD_DIR = release\nendif\n\n")
        fd.write(self.para['OPT'] + "\n\n")
        fd.write(self.c_source + "\n\n")
        fd.write(self.as_source + "\n\n")
        fd.write(self.cpp_source + "\n\n")
        if self.custom.__contains__('GCC_PATH'):
            fd.write(self.custom['GCC_PATH'] + "\n\n")
        fd.write(self.para['PREFIX'] + "\n\n")
        fd.write("ifdef GCC_PATH")
        fd.write(self.para['CC'].replace("CC = ","\nCC = $(GCC_PATH)/"))
        fd.write(self.para['AS'].replace("AS = ","\nAS = $(GCC_PATH)/"))
        fd.write(self.para['CP'].replace("CP = ","\nCP = $(GCC_PATH)/"))
        fd.write(self.para['SZ'].replace("SZ = ","\nSZ = $(GCC_PATH)/"))
        fd.write("\nelse\n")
        fd.write(self.para['CC'] + "\n")
        fd.write(self.para['AS'] + "\n")
        fd.write(self.para['CP'] + "\n")
        fd.write(self.para['SZ'] + "\n")
        fd.write("endif\n\n")
        fd.write("HEX = $(CP) -O ihex\n")
        fd.write("BIN = $(CP) -O binary -S\n\n")
        fd.write(self.para['THUMB'] + "\n")
        fd.write(self.para['CPU'] + "\n")
        fd.write(self.para['FPU'] + "\n")
        fd.write(self.para['FLOAT_ABI'] + "\n")
        fd.write(self.para['MCU'] + "\n")
        fd.write(self.para['AS_DEFS'] + "\n")
        fd.write(self.para['C_DEFS'] + "\n")
        fd.write(self.para['AS_INCLUDES'] + "\n")
        fd.write(self.para['C_INCLUDES'] + "\n")
        fd.write(self.para['TOOL_FLAGS'] + "\n")
        fd.write(self.para['ASFLAGS'] + "\n")
        fd.write(self.para['CFLAGS'] + "\n")
        fd.write("ifeq (${DEBUG}, 1)\n")
        fd.write(self.para['DEBUG_FLAG'] + "\nendif\n\nCFLAGS += -MMD -MP -MF\"$(@:%.o=%.d)\"\n")
        fd.write(self.para['LDSCRIPT'] + "\n")
        fd.write("LIBS = \nLIBDIR = \n")
        fd.write(self.para['LDFLAGS'] + "\n")
        fd.write("all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin\n")
        fd.write("OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))\nvpath %.c $(sort $(dir $(C_SOURCES)))\n")
        fd.write("OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(AS_SOURCES:.S=.o)))\nvpath %.S $(sort $(dir $(AS_SOURCES)))\n\n")
        fd.write("$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) \n\t$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@\n\n")
        fd.write("$(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR)\n\t$(AS) -c $(CFLAGS) $< -o $@\n\n")
        fd.write("$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile\n\t$(CC) $(CLFAGS) $(OBJECTS) $(LDFLAGS) -o $@\n\t$(SZ) $@\n\n")
        fd.write("$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)\n\t$(HEX) $< $@\n\n")
        fd.write("$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)\n\t$(BIN) $< $@\n\n")
        fd.write("$(BUILD_DIR):\n\tmkdir $@\n\n")
        fd.write("clean:\n\t-rm -fR $(BUILD_DIR)\n\n")
        dependencies = '-include $(wildcard $(BUILD_DIR)/*.d)\n'
        fd.write(dependencies)
        fd.close()
        print("Makefile generated!")

    def run_make(self):
        if os.path.isdir(self.para['MakefileDir']):
            print("Jump to the target dir:",self.para['MakefileDir'], "and run make cmd!")
            os.chdir(self.para['MakefileDir'])
            return os.system('make')
        else:
            print("the target dir:",self.para['MakefileDir'], "is not existed!")
            return 0x000f

if __name__ == '__main__':
    print("this file is an automake script.", time.strftime("%Y-%m-%d,%H:%M", time.gmtime()))
